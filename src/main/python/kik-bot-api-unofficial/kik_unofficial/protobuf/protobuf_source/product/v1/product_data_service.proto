syntax = "proto3";
package mobile.product.v1;

option java_package = "com.kik.product.rpc";
option go_package = "github.com/kikinteractive/xiphias-api-mobile/generated/go/product/v1;product";

import "protobuf_validation.proto";

import "asset/v1/asset_common.proto";
import "kin/authentication/v1/authentication_common.proto";
import "common_model.proto";
import "product/v1/product_data_common.proto";

service ProductData {
    // Return a collection's current list of products for the requesting user
    rpc GetProductCollection (GetProductCollectionRequest) returns (GetProductCollectionResponse);
    // Return products by ids for the requesting user
    rpc GetProducts (GetProductsRequest) returns (GetProductsResponse);
    // Returns newly generated JWT(s) for product(s)
    rpc GetProductJwt(GetProductJwtRequest) returns (GetProductJwtResponse);
    // Authenticate marketplace payment confirmation for a user
    rpc UnlockProduct(UnlockProductRequest) returns (UnlockProductResponse);
}

message GetProductCollectionRequest {
    // The id of the collection - will be generated by this service and will be known by the client
    // An example would be "chat-themes/v1/free/prod"
    string id = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_byte_length: 1
        max_byte_length: 255
    }];

    // Used to determine what size images to return
    common.asset.v1.PixelDensity pixel_density = 2;

    // Number of assets bundles to return per page.
    // Omit the page_size, the default of 40 will be used
    int32 page_size = 3 [(kik.validation.field_validation) = {
        max_val: 40 // sanity bound
    }];

    // PaginationToken - used when more than one page of assets are available
    // For an initial list request, this token should be omitted.
    // For subsequent pages, this token should be copied from the previous response.
    // Note that if the previous response has no token, that is an indication there are no further pages to fetch.
    PaginationToken pagination_token = 4;

    // Requesting user jid, used to map user to product(s) and determine if the user has purchased this product before
    common.XiBareUserJid user_jid = 10 [(kik.validation.field_validation) = { mandatory: true }];
}

message GetProductCollectionResponse {
    Result result = 1;
    enum Result {
        OK      = 0;
        // NOT_FOUND indicates that the collection could not be found
        NOT_FOUND = 1;
    }

    repeated Product products = 2 [(kik.validation.field_validation) = {
        max_repetitions: 40  // echos the sanity bound in the request
    }];

    uint64 internal_version = 3;

    // Not returned if this is the last page (End of list)
    PaginationToken pagination_token = 4;
}

message GetProductsRequest {
    repeated common.XiUuid ids  = 1 [(kik.validation.field_validation) = {
        min_repetitions: 1
        max_repetitions: 20
    }];

    // Used to determine what size images to return
    common.asset.v1.PixelDensity pixel_density = 2;

    // Requesting user jid, used to map user to product(s) and determine if the user has purchased this product before
    common.XiBareUserJid user_jid = 10 [(kik.validation.field_validation) = { mandatory: true }];
}

message PaginationToken {
    bytes token = 1 [(kik.validation.field_validation) = {
        max_byte_length: 5120 }];
}

message GetProductsResponse {
    Result result = 1;
    enum Result {
        OK      = 0;
        // PARTIAL indicates that an error occurred when retrieving info for some of the requested ids, but other ids may have been retrieved successfully
        PARTIAL = 1;
        // NOT_FOUND indicates an error occurred when retrieving all requested ids
        NOT_FOUND = 2;
    }

    // The successfully retrieved Products
    repeated Product products = 10 [(kik.validation.field_validation) = {
        max_repetitions: 20
    }];

    // Failed ids
    repeated common.XiUuid failed_ids = 11 [(kik.validation.field_validation) = {
        max_repetitions: 20
    }];

    // Not found ids
    repeated common.XiUuid not_found_ids = 12 [(kik.validation.field_validation) = {
        max_repetitions: 20
    }];
}

message GetProductJwtRequest {

    repeated common.kin.authentication.v1.OfferId offer_ids = 1 [(kik.validation.field_validation) = {
        mandatory: true
        min_repetitions: 1
        max_repetitions: 20
    }];
}

message GetProductJwtResponse {

    repeated common.kin.authentication.v1.OfferJwt offer_jwts = 1 [(kik.validation.field_validation) = {
        max_repetitions: 20
    }];
}

message UnlockProductRequest {

    common.XiBareUserJid user_jid = 1 [(kik.validation.field_validation) = { mandatory: true }];

    common.product.v1.PaymentConfirmation payment_confirmation = 2 [(kik.validation.field_validation) = { mandatory: true }];
}

message UnlockProductResponse {

    Result result = 1;
    enum Result {
        OK = 0;
        REJECTED = 1;
    }

    ProductJwtRejectionReason jwt_rejection_reason = 2;
}

message Product {
    // Unique identifier for an asset
    common.XiUuid id = 1 [(kik.validation.field_validation) = { mandatory: true }];

    common.asset.v1.ProductContent product_content = 2;

    // Product price data that includes Kin value
    common.product.v1.PriceData price_data = 3;

    // Purchase data contain info on the user's purchase of this product
    common.product.v1.PurchaseData purchase_data = 4;
}

message ProductJwtRejectionReason {

    Code code = 1;
    enum Code {
        UNKNOWN = 0;
        REJECTED_PRODUCT_JWT_INVALID = 1;
        REJECTED_PRODUCT_JWT_EXPIRED = 2;
    }
}
